#!/sbin/sh
#Setup
ZIP=/dev/tmp/install
rm -rf /dev/tmp 2>/dev/null
mkdir -p $ZIP
unzip -o "$3" -d $ZIP 2>/dev/null
OUTFD=$2
readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0
  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

#Functions
ui_print() {
  echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD
}

find_boot_image() {
  BOOTIMAGE=
  if [ ! -z $SLOT ]; then
    BOOTIMAGE=`find /dev/block -iname boot$SLOT | head -n 1` 2>/dev/null
  fi
  if [ -z $BOOTIMAGE ]; then
    # The slot info is incorrect...
    SLOT=
    for BLOCK in ramdisk boot_a kern-a android_boot kernel boot lnx bootimg; do
      BOOTIMAGE=`find /dev/block -iname $BLOCK | head -n 1` 2>/dev/null
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  # Recovery fallback
  if [ -z $BOOTIMAGE ]; then
    for FSTAB in /etc/*fstab*; do
      BOOTIMAGE=`grep -v '#' $FSTAB | grep -E '/boot[^a-zA-Z]' | grep -oE '/dev/[a-zA-Z0-9_./-]*'`
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  [ ! -z $BOOTIMAGE ] && BOOTIMAGE=`readlink -f $BOOTIMAGE`
}

find_dtbo_image() {
  DTBOIMAGE=`find /dev/block -iname dtbo$SLOT | head -n 1` 2>/dev/null
  [ ! -z $DTBOIMAGE ] && DTBOIMAGE=`readlink -f $DTBOIMAGE`
}

is_mounted() {
  TARGET="`readlink -f $1`"
  cat /proc/mounts | grep " $TARGET " >/dev/null
  return $?
}

mount_partitions() {
  # Check A/B slot
  SLOT=`getprop ro.boot.slot_suffix`
  if [ -z $SLOT ]; then
    SLOT=_`getprop ro.boot.slot`
    [ $SLOT = "_" ] && SLOT=
  fi
  # Check the boot image to make sure the slot actually make sense
  find_boot_image
  find_dtbo_image
  [ -z $SLOT ] || ui_print "A/B partition detected, current slot: $SLOT"
  ui_print "Mounting /system, /vendor"
  is_mounted /system || [ -f /system/build.prop ] || mount -o rw /system 2>/dev/null
  if ! is_mounted /system && ! [ -f /system/build.prop ]; then
    SYSTEMBLOCK=`find /dev/block -iname system$SLOT | head -n 1`
    mount -t ext4 -o rw $SYSTEMBLOCK /system
  fi
  is_mounted /system || [ -f /system/build.prop ] || abort "! Cannot mount /system"
  cat /proc/mounts | grep -E '/dev/root|/system_root' >/dev/null && SKIP_INITRAMFS=true || SKIP_INITRAMFS=false
  if [ -f /system/init.rc ]; then
    SKIP_INITRAMFS=true
    mkdir /system_root 2>/dev/null
    mount --move /system /system_root
    mount -o bind /system_root/system /system
  fi
  $SKIP_INITRAMFS && ui_print "Device skip_initramfs detected"
  if [ -L /system/vendor ]; then
    # Seperate /vendor partition
    is_mounted /vendor || mount -o rw /vendor 2>/dev/null
    if ! is_mounted /vendor; then
      VENDORBLOCK=`find /dev/block -iname vendor$SLOT | head -n 1`
      mount -t ext4 -o rw $VENDORBLOCK /vendor
    fi
    is_mounted /vendor || abort "! Cannot mount /vendor"
  fi
}

unmount_partitions() {
  ui_print "Unmounting partitions"
  umount -l /system_root 2>/dev/null
  umount -l /system 2>/dev/null
  umount -l /vendor 2>/dev/null
  rm -rf /dev/tmp
}

abort() {
  ui_print "$1"
  unmount_partitions
  exit 1
}

# Main
ui_print " "
ui_print "    *******************************************"
ui_print "    *    OOS Native Call Recording Enabler    *"
ui_print "    *******************************************"
ui_print "    *              by: Zackptg5               *"
ui_print "    *******************************************"
ui_print " "
mount_partitions
[ "$(grep "ro.build.version.ota=OnePlus" /system/build.prop)" -o "$(grep "ro.product.brand=OnePlus" /system/build.prop)" ] && [ "$(grep "ro.build.version.ota=.*Oxygen" /system/build.prop)" ] || abort "!Unsupported device. Aborting!"

if [ -d /system/vendor/etc/init ]; then
  DIR=/system/vendor/etc/init
else
  DIR=/system/etc/init
fi

if [ -f "$DIR/init.ncr.rc" ]; then
  ui_print "Removing native call recording"
  rm -f $DIR/init.ncr.rc
else
  ui_print "Adding native call recording"
  cp -f $ZIP/init.ncr.rc $DIR/init.ncr.rc
  chmod 0644 $DIR/init.ncr.rc
  chcon u:object_r:vendor_configs_file:s0 $DIR/init.ncr.rc
fi

unmount_partitions
exit 0
